#include "Colors.hpp"

#include <sstream>

#include "App.hpp"

namespace footprint {

Colors::Colors() :
    // Scheme generated by: http://colorschemedesigner.com/#3E61ThWs0g0g0
    colors {
        {
            // Primary Color:
            Wt::WColor(0x48,0x67,0x93),
            Wt::WColor(0x47,0x5F,0x80),
            Wt::WColor(0x2C,0x4D,0x79),
            Wt::WColor(0x60,0x81,0xAE),
            Wt::WColor(0x69,0x86,0xAE)
        },
        {
            // Secondary Color A:
            Wt::WColor(0x5A,0x4F,0x9B),
            Wt::WColor(0x56,0x4E,0x87),
            Wt::WColor(0x3C,0x31,0x80),
            Wt::WColor(0x72,0x67,0xB4),
            Wt::WColor(0x79,0x70,0xB4),
        },
        {
            // Secondary Color B:
            Wt::WColor(0x3F,0x90,0x7E),
            Wt::WColor(0x40,0x7E,0x70),
            Wt::WColor(0x27,0x77,0x65),
            Wt::WColor(0x58,0xAC,0x99),
            Wt::WColor(0x61,0xAC,0x9B),
        },
        {
            // Complementary Color:
            Wt::WColor(0xDF,0xB0,0x62),
            Wt::WColor(0xC3,0x9F,0x64),
            Wt::WColor(0xB8,0x8A,0x3D),
            Wt::WColor(0xE7,0xBD,0x76),
            Wt::WColor(0xE7,0xC1,0x83),
        }
    }
{ }

Colors* Colors::instance() {
    App* app = dynamic_cast<App*>(Wt::WApplication::instance());
    return &app->colors;
}

std::string Colors::bg(size_t a, size_t b) {
    return std::string("background-color:") + get(a, b) + ";";
}

std::string Colors::fg(size_t a, size_t b) {
    return std::string("color:") + get(a, b) + ";";
}

/// Returns the CSS format for a color, eg. #aabbcc
std::string Colors::get(size_t a, size_t b) {
    const Wt::WColor& col = colors[a][b];
    if (!col.name().empty())
        return col.name().toUTF8();
    std::stringstream result;
    result << '#' << std::hex << col.red() << col.green() << col.blue() << ';';
    return result.str();
}

} // namespace footprint
